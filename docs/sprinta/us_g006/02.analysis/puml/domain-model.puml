@startuml domain-model

skinparam classAttributeIconSize 0
hide empty attributes
hide empty methods
skinparam classBackgroundColor beige
skinparam ArrowColor #222222

' User Aggregate
package "<<aggregate>> User" {
    entity User <<entity>> <<root>> {
        + Email email
        + FullName fullName
        + Password password
        + TaxPayerNumber taxPayerNumber
        + PhoneNumber phoneNumber
        + BirthDate birthDate
    }
}

' Admin Aggregate
package "<<aggregate>> Admin" {
    entity Admin <<entity>> <<root>> {}
}

' Customer Manager Aggregate
package "<<aggregate>> Customer Manager" {
    entity CustomerManager <<entity>> <<root>> {}
}

' Operator Aggregate
package "<<aggregate>> Operator" {
    entity Operator <<entity>> <<root>> {}
}

' Language Engineer Aggregate
package "<<aggregate>> Language Engineer"{
    entity LanguageEngineer <<entity>> <<root>> {}
}

' Candidate Aggregate
package "<<aggregate>> Candidate" {
    entity Candidate <<entity>> <<root>> {}
}

' Customer Aggregate
package "<<aggregate>> Customer" {
    entity Customer <<entity>> <<root>> {}
}

' Applications File Bot Aggregate
package "<<aggregate>>  Applications File Bot" {
    entity  ApplicationsFileBot <<entity>> <<root>> {}
}

' Recruitment Process Aggregate
package "<<aggregate>> Recruitment Process" {
    entity RecruitmentProcess <<entity>> <<root>> {
        + InitialDate initialDate
        + FinalDate finalDate
    }
    entity ApplicationPhase <<entity>> {
        + State state
        + InitialDate initialDate
        + FinalDate finalDate
    }
    note right of ApplicationPhase: State can be Opened or Closed

    entity ScreeningPhase <<entity>> {
        + State state
        + InitialDate initialDate
        + FinalDate finalDate
    }
    entity InterviewPhase <<entity>> {
        + State state
        + InitialDate initialDate
        + FinalDate finalDate
    }
    entity AnalysisPhase <<entity>> {
        + State state
        + InitialDate initialDate
        + FinalDate finalDate
    }
    entity ResultPhase <<entity>> {
        + State state
        + InitialDate initialDate
        + FinalDate finalDate
    }
}

' Job Opening Aggregate
package "<<aggregate>> Job Opening" {
    entity JobOpening <<entity>> <<root>> {
        + JobReference jobReference
        + TitleOrFunction titleOrFunction
        + ContractType contractType
        + Mode mode
        + Address address
        + Company company
        + NumberOfVacancies numberOfVacancies
        + Description description
    }
}

' RequirementSpecification
package "<<aggregate>> Requirement Specification" {
    entity RequirementSpecification <<entity>> <<root>> {}
}

' Interview Phase Model Aggregate
package "<<aggregate>> Interview Model" {
    entity InterviewModel <<entity>>  {}
}

' Interview Aggregate
package "<<aggregate>> Interview" {
    entity Interview <<entity>> <<root>> {}
}

' Candidate Answer Aggregate
package "<<aggregate>> Candidate Answer" {
    entity CandidateAnswer <<entity>> <<root>> {}
}

' Interview Question Aggregate
package "<<aggregate>> Interview Question" {  
    entity InterviewQuestion <<entity>> <<root>> {
        + Grade grade
    }
}

' Specification Question Aggregate
package "<<aggregate>> Specification Question" {  
    entity SpecificationQuestion <<entity>> <<root>> {}
}

' Plugins Aggregate
package "<<aggregate>> Requirements Model" {
    entity RequirementModel <<entity>> <<root>> {}
}

' Ranking Aggregate
package "<<aggregate>> Ranking" {
    entity Ranking <<entity>> <<root>> {
        + Position position
    }
}

' Question Model Aggregate
package "<<aggregate>> Question Model" {
    entity QuestionModel <<entity>> <<root>> {
        + QuestionText questionText
        + Answer answer
    }
    entity TrueOrFalse <<entity>> {}
    entity ShortTextAnswer <<entity>> {}
    entity SingleChoiceAnswer <<entity>> {}
    entity MultipleChoiceAnswer <<entity>> {}
    entity IntegerNumber <<entity>> {}
    entity DecimalNumber <<entity>> {}
    entity Date <<entity>> {}
    entity Time <<entity>> {}
    entity NumericScale <<entity>> {}
    entity QuestionBody <<entity>> {}
}

' File Aggregate
package "<<aggregate>> File" {
    entity File <<entity>> <<root>> {}
}

' Result Aggregate
package "<<aggregate>> Result" {
    entity Result <<entity>> <<root>> {
        + Outcome outcome
        + Justification justification
    }
    note left of Result: Outcome can be Approved or Rejected
    note right of Result: Rejected outcomes must have a justification
}

' User value objects relationships
Admin --* User
CustomerManager --* User
Operator --* User
Customer --* User
LanguageEngineer --* User
Candidate --* User

' Admin relationships
Admin --> Customer: registers and manages
Admin --> CustomerManager: manages
Admin --> Operator: defines

' Operator relationships
Operator --> Candidate: may register
Operator --> ApplicationPhase: registers applications
Operator --> File: imports

' Customer Manager relationships
CustomerManager --> Customer: manages
CustomerManager --> JobOpening: registers and manages
CustomerManager --> RecruitmentProcess: setup

' Recruitment Process relationships
RecruitmentProcess --> ApplicationPhase: has
RecruitmentProcess --> ScreeningPhase: has
RecruitmentProcess --> InterviewPhase: can have
RecruitmentProcess --> AnalysisPhase: has
RecruitmentProcess --> ResultPhase: has

' Job Opening relationships
JobOpening ---> RecruitmentProcess: has
JobOpening --> RequirementSpecification: has
RequirementSpecification --> RequirementModel: uses

' InterviewPhase Models relationships
InterviewModel --> InterviewQuestion: has

' Job Requirement Model relationships
RequirementModel --> SpecificationQuestion : has

' ScreeningPhase relationships
ScreeningPhase --> RequirementModel : has

'Interview Phase relationships
InterviewPhase --> Interview: has

' Interview relationships
Interview --> InterviewModel: uses

' AnalysisPhase relationships
AnalysisPhase --> Ranking: has

' Ranking relationships
Ranking --> Candidate: refers to a

' Interview Answers relationships
CandidateAnswer --> InterviewQuestion: for an

' Requirement relationships
CandidateAnswer --> SpecificationQuestion: for a

' Applications File Bot relationships
ApplicationsFileBot --> File: exports

' Language Engineer relationships
LanguageEngineer --> InterviewModel: deploys and configure
LanguageEngineer --> RequirementModel: deploys and configure

' Result Phase relationships
ResultPhase --> Result: has

' Result relationships
Result --> Candidate: refers to a

' Candidate relationships
Candidate --> CandidateAnswer: provides

' Interview Question relationships
InterviewQuestion --> QuestionModel: has

' Specification Question relationships
SpecificationQuestion --> QuestionModel: has

' Question Model relationships
TrueOrFalse --|> QuestionModel: is a
ShortTextAnswer --|> QuestionModel: is a
SingleChoiceAnswer --|> QuestionModel: is a
MultipleChoiceAnswer --|> QuestionModel: is a
IntegerNumber --|> QuestionModel: is a
DecimalNumber --|> QuestionModel: is a
Date --|> QuestionModel: is a
Time --|> QuestionModel: is a
NumericScale --|> QuestionModel: is a
QuestionBody --|> QuestionModel: is a

@enduml
