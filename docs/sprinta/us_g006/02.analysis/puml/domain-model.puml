@startuml domain-model

skinparam classAttributeIconSize 0
hide empty attributes
hide empty methods
skinparam classBackgroundColor beige
skinparam ArrowColor #222222

' User Aggregate
package "<<aggregate>> User" {
    entity User <<entity>> <<root>> {
        + Email email
        + FullName fullName
        + Password password
        + TaxPayerNumber taxPayerNumber
        + PhoneNumber phoneNumber
        + BirthDate birthDate
    }
}

' Admin Aggregate
package "<<aggregate>> Admin" {
    entity Admin <<entity>> <<root>> {}
}

' Customer Manager Aggregate
package "<<aggregate>> Customer Manager" {
    entity CustomerManager <<entity>> <<root>> {}
}

' Operator Aggregate
package "<<aggregate>> Operator" {
    entity Operator <<entity>> <<root>> {}
}

' Language Engineer Aggregate
package "<<aggregate>> Language Engineer"{
    entity LanguageEngineer <<entity>> <<root>> {}
}

' Candidate Aggregate
package "<<aggregate>> Candidate" {
    entity Candidate <<entity>> <<root>> {}
}

' Customer Aggregate
package "<<aggregate>> Customer" {
    entity Customer <<entity>> <<root>> {}
}

' Applications Email Bot Aggregate
package "<<aggregate>>  Applications Email Bot" {
    entity  ApplicationsEmailBot <<entity>> <<root>> {}
}

' Applications File Bot Aggregate
package "<<aggregate>>  Applications File Bot" {
    entity  ApplicationsFileBot <<entity>> <<root>> {}
}

' Recruitment Process Aggregate
package "<<aggregate>> Recruitment Process" {
    entity RecruitmentProcess <<entity>> <<root>> {
        + InitialDate initialDate
        + FinalDate finalDate
    }
    entity ApplicationPhase <<entity>> <<root>> {}
    entity ScreeningPhase <<entity>> {}
    entity InterviewPhase <<entity>> {}
    entity AnalysisPhase <<entity>> {}
    entity ResultPhase <<entity>> {}
}

' Job Opening Aggregate
package "<<aggregate>> Job Opening" {
    entity JobOpening <<entity>> <<root>> {
        + JobReference jobReference
        + TitleOrFunction titleOrFunction
        + ContractType contractType
        + Mode mode
        + Address address
        + Company company
        + NumberOfVacancies numberOfVacancies
        + Description description
    }
}

' Job Requirements Specification Aggregate
package "<<aggregate>> Job Requirements Specification" {
    entity JobRequirementSpecification <<entity>> <<root>> {}
}

' Interview Phase Model Aggregate
package "<<aggregate>> InterviewPhase Model" {
    entity InterviewModel <<entity>> <<root>> {}
}

' Question Aggregate
package "<<aggregate>> Question" {  
    entity Question <<entity>> <<root>> {
        + TrueOrFalse trueOrFalse
        + ShortTextAnswer shortTextAnswer
        + SingleChoiceAnswer singleChoiceAnswer
        + MultipleChoiceAnswer multipleChoiceAnswer
        + IntegerNumber integerNumber
        + DecimalNumber decimalNumber
        + Date date
        + Time time
        + NumericScale numericScale
        + QuestionBody questionBody
        + Grade grade
    }
    note right of Question: Questions can have multiple answers \nand each answer has a value
}

' Value Objects
class File <<(V, #D3D3D3) value object>> {}
class Report <<(V, #D3D3D3) value object>> {}

' User value objects relationships
Admin --* User
CustomerManager --* User
Operator --* User
Customer --* User
LanguageEngineer --* User
Candidate --* User

' Admin relationships
Admin --> Customer: registers and manages
Admin --> CustomerManager: manages
Admin --> Operator: defines

' Operator relationships
Operator --> Candidate: may register
Operator --> ApplicationPhase: registers applications
Operator --> Report: imports

' Customer Manager relationships
CustomerManager --> Customer: manages
CustomerManager --> JobOpening: registers and manages
CustomerManager --> RecruitmentProcess: setup

' Recruitment Process relationships
RecruitmentProcess --> ApplicationPhase: has
RecruitmentProcess --> ScreeningPhase: has
RecruitmentProcess --> InterviewPhase: can have
RecruitmentProcess --> AnalysisPhase: has
RecruitmentProcess --> ResultPhase: has

' Job Opening relationships
JobOpening --* JobRequirementSpecification

' InterviewPhase Models relationships
InterviewModel --> Question: has

'Interview Phase relationships
InterviewPhase --> InterviewModel: has

' Applications Email Bot relationships
ApplicationsEmailBot --> File: generates

' Applications File Bot relationships
ApplicationsFileBot --> File: imports
ApplicationsFileBot --> Report: generates

@enduml
