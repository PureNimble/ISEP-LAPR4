@startuml SD-US1001

title Sequence Diagram - US1001

skinparam linetype ortho
skinparam maxmessagesize 150
skinparam sequenceParticipant underline

actor "CustomerBuilder Manager" as customerManager

participant "RegisterCustomerUI" as UI
participant "RegisterCustomerController" as CustomerController
participant "CustomerBuilder" as CustomerBuilder
participant "CustomerRepository" as CustomerRepository
participant "JpaCustomerRepository" as JpaCustomerRepository
participant "AddUserController" as AddUserController
participant "UserManagementService" as ManagementService
participant "UserTypesFactory" as Factory
participant "UserRepository" as UserRepository
participant "JpaUserRepository" as JpaUserRepository
participant "RegisterCustomerUserController" as CustomerUserController
participant "CustomerUserBuilder" as CustomerUserBuilder
participant "CustomerUserRepository" as CustomerUserRepository
participant "JpaCustomerUserRepository" as JpaCustomerUserRepository
database "Database" as DB

activate customerManager

customerManager -> UI: Asks to register a customer

activate UI
    UI --> customerManager: Asks for information (company name, address, customer code, customer email, phone number, first name, last name, email)
deactivate UI

customerManager -> UI: Provides information

activate UI
    UI -> CustomerController: addCustomer(companyName, address, customerCode, email, phone)
        activate CustomerController
        CustomerController -> CustomerBuilder: with(companyName, address, customerCode, email, phone)
        activate CustomerBuilder
            CustomerBuilder --> CustomerController: Customer
        deactivate CustomerBuilder
        CustomerController --> CustomerRepository: save(customer)
            activate CustomerRepository
                CustomerRepository --> JpaCustomerRepository: save(customer)
                activate JpaCustomerRepository
                    JpaCustomerRepository -> DB: persist(customer)
                    activate DB
                        DB --> JpaCustomerRepository: Customer
                    deactivate DB
                    JpaCustomerRepository --> CustomerRepository: Customer
                deactivate JpaCustomerRepository
                CustomerRepository --> CustomerController: Customer
            deactivate CustomerRepository
            CustomerController --> UI: Customer
        deactivate CustomerController
    UI -> AddUserController: addUser(email, password, first name, last name)
activate AddUserController

AddUserController -> ManagementService: registerNewUser(email, password, first name, last name, role)

activate ManagementService
    ManagementService -> Factory: registerNewUser(email, password, first name, last name, role)
activate Factory
    Factory --> ManagementService : user
deactivate Factory

ManagementService -> UserRepository: save(user)

activate UserRepository
    UserRepository -> JpaUserRepository: save(user)
activate JpaUserRepository
    JpaUserRepository -> DB: persist(user)
    activate DB
        DB --> JpaUserRepository: User
    deactivate DB
    JpaUserRepository --> UserRepository: User
deactivate JpaUserRepository

UserRepository --> ManagementService: User
deactivate UserRepository

ManagementService --> AddUserController: User
deactivate ManagementService

AddUserController --> UI: User
deactivate AddUserController

UI -> CustomerUserController: registerCustomerUser(customer, user)
activate CustomerUserController
    CustomerUserController -> CustomerUserBuilder: with(customer, user)
    activate CustomerUserBuilder
        CustomerUserBuilder --> CustomerUserController: CustomerUser
    deactivate CustomerUserBuilder
    CustomerUserController -> CustomerUserRepository: save(customerUser)
    activate CustomerUserRepository
        CustomerUserRepository -> JpaCustomerUserRepository: save(customerUser)
        activate JpaCustomerUserRepository
            JpaCustomerUserRepository -> DB: persist(customerUser)
            activate DB
                DB --> JpaCustomerUserRepository: CustomerUser
            deactivate DB
            JpaCustomerUserRepository --> CustomerUserRepository: CustomerUser
        deactivate JpaCustomerUserRepository
        CustomerUserRepository --> CustomerUserController: CustomerUser
    deactivate CustomerUserRepository
    CustomerUserController --> UI: CustomerUser
deactivate CustomerUserController
UI --> customerManager: Informs success or failure
deactivate UI

deactivate customerManager

@enduml