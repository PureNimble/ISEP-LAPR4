@startuml domain-model

title DOMAIN MODEL - DDD

hide empty members
'skinparam Linetype ortho

skinparam class {
    BackgroundColor<<valueObject>> #D6EAF8
    BackgroundColor<<root>> #FDEBD0
    BackgroundColor<<service>> #D1F2EB
    BackgroundColor #FEF9E7
    ArrowColor Black
}

skinparam package {
    BackgroundColor #EBF5FB
}

' User Aggregate
package "<<aggregate>> User" {
    entity User <<entity>> <<root>> {}

    class Password <<valueObject>> <<(V, #FF8B40)>> {}
    class Role <<valueObject>> <<(V, #FF8B40)>> {}
    class IsActive <<valueObject>> <<(V, #FF8B40)>> {}

    class Authentication <<service>> <<(S, #85C1E9)>> {}

    class Token <<valueObject>> <<(V, #FF8B40)>> {}
    class createdOn <<valueObject>> <<(V, #FF8B40)>> {}
    class PasswordPolicy <<service>> <<(S, #85C1E9)>> {}
    class PasswordEncoder <<service>> <<(S, #85C1E9)>> {}
}

class PhoneNumber <<valueObject>> <<(V, #FF8B40)>> {}
class Email <<valueObject>> <<(V, #FF8B40)>> {}

' Application Aggregate
package "<<aggregate>> Application" {
    entity Application <<entity>> <<root>> {}
    entity Result <<entity>> {}

    class ApplicationDate <<valueObject>> <<(V, #FF8B40)>> {}
    class ApplicationNumber <<valueObject>> <<(V, #FF8B40)>> {}
    class Outcome <<valueObject>> <<(V, #FF8B40)>> {}
    class Justification <<valueObject>> <<(V, #FF8B40)>> {}

    note right of Outcome: Outcome can be Approved or Rejected
    note left of Justification: Rejected outcomes must have a justification
}

' Rank Aggregate
package "<<aggregate>> Rank" {
    entity Rank <<entity>> <<root>> {}
}


' Candidate Aggregate
package "<<aggregate>> Candidate" {
    entity Candidate <<entity>> <<root>> {}

    class FirstName <<valueObject>> <<(V, #FF8B40)>> {}
    class LastName <<valueObject>> <<(V, #FF8B40)>> {}
}

' Candidate Answer Aggregate
package "<<aggregate>> Candidate Answer" {
    entity CandidateAnswer <<entity>> <<root>> {}

    class Grade <<valueObject>> <<(V, #FF8B40)>> {}
}

' Customer Aggregate
package "<<aggregate>> Customer" {
    entity Customer <<entity>> <<root>> {}

    class CompanyName <<valueObject>> <<(V, #FF8B40)>> {}
    class CustomerCode <<valueObject>> <<(V, #FF8B40)>> {}
}

' Job Opening Aggregate
package "<<aggregate>> Job Opening" {
    entity JobOpening <<entity>> <<root>> {}

    class JobReference <<valueObject>> <<(V, #FF8B40)>> {}
    class TitleOrFunction <<valueObject>> <<(V, #FF8B40)>> {}
    class ContractType <<valueObject>> <<(V, #FF8B40)>> {}
    class Mode <<valueObject>> <<(V, #FF8B40)>> {}
    class Company <<valueObject>> <<(V, #FF8B40)>> {}
    class NumberOfVacancies <<valueObject>> <<(V, #FF8B40)>> {}
    class JobDescription <<valueObject>> <<(V, #FF8B40)>> {}
    entity RequirementSpecification <<entity>> {}
}

class Address <<valueObject>> <<(V, #FF8B40)>> {}

' Interview Aggregate
package "<<aggregate>> Interview" {
    entity Interview <<entity>> <<root>> {}

    class InterviewDate <<valueObject>> <<(V, #FF8B40)>> {}
    class InterviewTime <<valueObject>> <<(V, #FF8B40)>> {}
}


' Plugin Aggregate
package "<<aggregate>> Plugin" {
    entity Plugin <<entity>> <<root>> {}
    entity RequirementModel <<entity>> {}
    entity InterviewModel <<entity>> {}
        
    class Description <<valueObject>> <<(V, #FF8B40)>> {}
}

' RecruitmentProcess Aggregate
package "<<aggregate>> RecruitmentProcess" {
    entity RecruitmentProcess <<entity>> <<root>> {}
    entity Phase <<entity>> {}
    entity ApplicationPhase <<entity>> {}
    entity ScreeningPhase <<entity>> {}
    entity InterviewPhase <<entity>> {}
    entity AnalysisPhase <<entity>> {}
    entity ResultPhase <<entity>> {}
    
    class InitialDate <<valueObject>> <<(V, #FF8B40)>> {}
    class FinalDate <<valueObject>> <<(V, #FF8B40)>> {}
    class State <<valueObject>> <<(V, #FF8B40)>> {}

    note right of State: State can be Opened or Closed
}

' User relationships
User "1" --> "1" Email : has
User "1" --> "1" Password : has
User "1" --> "1" Role : has
User "1" --> "1" IsActive : can be
User "1" --> "1" Authentication : authenticated by

' Authentication relationships
Authentication "1" ..> "1" Email : authenticated by
Authentication "1" ..> "1" Password : authenticated by
Authentication "1" ..> "1" Token : generates
Authentication "1" ..> "1" createdOn : generates
Authentication "1" ..> "1" PasswordPolicy : applies
Authentication "1" ..> "1" PasswordEncoder : uses

' Password relationships
Password "1" ..> "1" PasswordPolicy : applies
Password "1" ..> "1" PasswordEncoder : uses

' Recruitment Process relationships
RecruitmentProcess "1" --> "1" InitialDate : has
RecruitmentProcess "1" --> "1" FinalDate : has
RecruitmentProcess "1" --> "*" Phase : has
RecruitmentProcess "1" --> "1" JobOpening : for

' Job Opening relationships
JobOpening "1" --> "1" JobReference : has
JobOpening "1" --> "1" TitleOrFunction : has
JobOpening "1" --> "1" ContractType : has
JobOpening "1" --> "1" Mode : has
JobOpening "1" --> "1" Address : has
JobOpening "1" --> "1" Company : has
JobOpening "1" --> "1" NumberOfVacancies : has
JobOpening "1" --> "1" JobDescription : has
JobOpening "1" --> "1" RequirementSpecification: has
JobOpening "1" -down--> "1" Interview : can have

' Plugin relationships
Plugin "1" --> "1" Description : has
Plugin -down-* InterviewModel
Plugin -down-* RequirementModel

' Interview relationships
Interview "1" --> "1" InterviewDate : has
Interview "1" --> "1" InterviewTime : has
Interview "1" --> "1" Plugin : uses

' Result relationships
Result "1" --> "1" Outcome : has
Result "1" --> "1" Justification : can have

' Application relationships
Application "1" --> "1" ApplicationDate : has
Application "1" --> "1" ApplicationNumber : has
Application "1" --> "0..1" Result : has
Application "1" --> "1" JobOpening : for
Application "1" --> "1" Candidate : from

' Customer relationships
Customer "1" --> "1" CustomerCode : has
Customer "1" --> "1" CompanyName : has
Customer "1" --> "1" Address : has
Customer "1" --> "1" Email : has
Customer "1" --> "1" PhoneNumber : has
Customer "1" ---|> "1" User : has

' Job Opening relationships
JobOpening "1" --> "1" Customer : has

' Phase relationships
Phase "1" --> "1" State: has
Phase "1" --> "1" InitialDate: has
Phase "1" --> "1" FinalDate: has

ApplicationPhase -up-|> Phase: is a
ScreeningPhase -up-|> Phase: is a
InterviewPhase -up-|> Phase: is a
AnalysisPhase -up-|> Phase: is a
ResultPhase -up-|> Phase: is a

' Requirement Specification relationships
RequirementSpecification "1" --> "1" Plugin: uses

' Candidate relationships
Candidate "1" --> "1" FirstName : has
Candidate "1" --> "1" LastName : has
Candidate "1" --> "1" PhoneNumber : has
Candidate "1" --> "1" Email : has
Candidate "1" ---|> "1" User : has

' Rank relationships
Rank "1" --> "1" JobOpening : for

' Candidate Answer relationships
CandidateAnswer "1" --> "1" Interview : for
CandidateAnswer "1" --> "1" Grade : has

@enduml